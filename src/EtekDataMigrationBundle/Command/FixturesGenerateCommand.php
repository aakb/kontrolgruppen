<?php

/*
 * This file is part of aakb/kontrolgruppen.
 *
 * (c) 2019 ITK Development
 *
 * This source file is subject to the MIT license.
 */

/*
 * This file is part of aakb/kontrolgruppen.
 *
 * (c) 2019 ITK Development
 *
 * This source file is subject to the MIT license.
 */

namespace App\EtekDataMigrationBundle\Command;

use Doctrine\ORM\EntityManagerInterface;
use Kontrolgruppen\CoreBundle\DBAL\Types\JournalEntryEnumType;
use Kontrolgruppen\CoreBundle\Entity\BaseConclusion;
use Kontrolgruppen\CoreBundle\Entity\Client;
use Kontrolgruppen\CoreBundle\Entity\JournalEntry;
use Kontrolgruppen\CoreBundle\Entity\Process;
use Kontrolgruppen\CoreBundle\Entity\User;
use Kontrolgruppen\CoreBundle\Entity\WeightedConclusion;
use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Exception\InvalidArgumentException;
use Symfony\Component\Console\Exception\RuntimeException;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ConfirmationQuestion;
use Symfony\Component\Console\Style\SymfonyStyle;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpKernel\KernelInterface;
use Symfony\Component\Serializer\SerializerInterface;

class FixturesGenerateCommand extends Command
{
    protected static $defaultName = 'etek:fixtures:generate';

    private $objects = [
        'Case' => Process::class,
        'CaseNotes' => JournalEntry::class,
        'CaseWorker' => User::class,
        'Client' => Client::class,
        'FinancialSupport' => JournalEntry::class,
        'FinancialSupportType' => null,
    ];

    private $additionalObjects = [
        // class => data name
        BaseConclusion::class => 'CaseNotes',
        WeightedConclusion::class => 'CaseNotes',
    ];

    private $otherStuff = [
        'SharedEconomy' => [
            'data' => 'Client',
            'class' => JournalEntry::class,
        ],
    ];

    /** @var array */
    private $data;

    /** @var Filesystem */
    private $filesystem;

    /** @var SerializerInterface */
    private $serializer;

    /** @var EntityManagerInterface */
    private $entityManager;

    /** @var KernelInterface */
    private $kernel;

    public function __construct(Filesystem $filesystem, SerializerInterface $serializer, EntityManagerInterface $entityManager, KernelInterface $kernel)
    {
        parent::__construct();

        $this->filesystem = $filesystem;
        $this->serializer = $serializer;
        $this->entityManager = $entityManager;
        $this->kernel = $kernel;
    }

    protected function configure()
    {
        $this
            ->addArgument('data directory', InputArgument::OPTIONAL, 'Path to JSON data files. Required if not using --unescape-content.')
            ->addOption('unescape-content', null, InputOption::VALUE_NONE, 'Unescape content loaded from fixtures generated by this command.')
            ->setDescription('Converts exported data to fixtures. Optionally loads fixtures.');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $io = new SymfonyStyle($input, $output);

        if ($input->getOption('unescape-content')) {
            return $this->unescapeContent($output);
        }

        $dataDirectory = $input->getArgument('data directory');
        if (null === $dataDirectory) {
            throw new RuntimeException('Not enough arguments (missing: "data directory").');
        }
        if (!$this->filesystem->exists($dataDirectory)) {
            throw new InvalidArgumentException(sprintf('Data directory %s does not exist', $dataDirectory));
        }
        $dataDirectory = realpath($dataDirectory);

        $fixturesDirectory = realpath(__DIR__.'/../fixtures');

        // Load all data to make is available for fixture generation.
        $this->data = [];
        foreach ($this->objects as $name => $class) {
            $dataFilename = $dataDirectory.'/'.$name.'.json';
            if (!$this->filesystem->exists($dataFilename)) {
                throw new InvalidArgumentException(sprintf('Data file %s does not exist', $dataFilename));
            }
            $this->data[$name] = $this->loadData($name, $dataFilename);
        }

        foreach ($this->objects as $name => $class) {
            $fixtureFilename = $fixturesDirectory.'/'.$name.'.yaml';
            if ($this->generateFixture($name, $fixtureFilename)) {
                $output->writeln(sprintf('Fixture for %s written to file %s', $name, $fixtureFilename));
            }
        }

        foreach ($this->additionalObjects as $class => $dataName) {
            $name = (new \ReflectionClass($class))->getShortName();
            $fixtureFilename = $fixturesDirectory.'/'.$name.'.yaml';
            if ($this->generateAdditionalFixture($class, $dataName, $fixtureFilename)) {
                $output->writeln(sprintf('Fixture for %s written to file %s', $name, $fixtureFilename));
            }
        }

        foreach ($this->otherStuff as $name => $info) {
            $dataName = $info['data'];
            $class = $info['class'];
            $fixtureFilename = $fixturesDirectory.'/'.$name.'.yaml';
            if ($this->generateAdditionalFixture($class, $dataName, $fixtureFilename, $name)) {
                $output->writeln(sprintf('Fixture for %s written to file %s', $name, $fixtureFilename));
            }
        }

        $question = new ConfirmationQuestion('Import fixtures? ', true);
        if ($io->askQuestion($question)) {
            $this->importFixtures($output);
            $this->unescapeContent($output);
            $this->cleanLogs($output);
        } else {
            $io->text([
                'Load the generated fixtures by running.',
                '  bin/console hautelook:fixtures:load --bundle=EtekDataMigrationBundle',
            ]);
            $io->note([
                'Remember to run ',
                '  bin/console '.self::$defaultName.' --unescape-content',
                'after loading fixtures to fix journal entry content.',
            ]);
            $io->note([
                'Please execute',
                '  bin/console doctrine:query:sql \'SET FOREIGN_KEY_CHECKS = 0; TRUNCATE process_log_entry; TRUNCATE ext_log_entries;\'',
                'to clear the logs.',
            ]);
        }

        return 0;
    }

    private function importFixtures(OutputInterface $output)
    {
        $application = new Application($this->kernel);
        $application->setAutoExit(false);

        $input = new ArrayInput([
            'command' => 'hautelook:fixtures:load',
            '--bundle' => ['EtekDataMigrationBundle'],
            '--no-interaction' => true,
            '--purge-with-truncate' => true,
        ]);

        $application->run($input, $output);
    }

    private function cleanLogs(OutputInterface $output)
    {
        $application = new Application($this->kernel);
        $application->setAutoExit(false);

        $input = new ArrayInput([
            'command' => 'doctrine:query:sql',
            'sql' => 'SET FOREIGN_KEY_CHECKS = 0; TRUNCATE process_log_entry; TRUNCATE ext_log_entries;',
        ]);

        $application->run($input, $output);
    }

    private function generateFixture($name, $fixtureFilename)
    {
        if (!empty($this->objects[$name])) {
            $class = $this->objects[$name];

            $data = $this->getData($name);
            $fixture = $this->{'buildFixture'.$name}($data);

            $this->filesystem->dumpFile($fixtureFilename, $this->serializer->encode(
                [
                    $class => $fixture,
                ],
                'yaml',
                [
                    'yaml_inline' => 87,
                ]
            ));

            return true;
        }

        return false;
    }

    private function generateAdditionalFixture($class, $dataName, $fixtureFilename, $name = null)
    {
        $data = $this->getData($dataName);
        $name = $name ?? (new \ReflectionClass($class))->getShortName();
        $fixture = $this->{'buildFixture'.$name}($data);

        $this->filesystem->dumpFile($fixtureFilename, $this->serializer->encode(
            [
                $class => $fixture,
            ],
            'yaml',
            [
                'yaml_inline' => 87,
            ]
        ));

        return true;
    }

    private function loadData($name, $filename): array
    {
        $contents = file_get_contents($filename);
        $data = $this->serializer->decode($contents, 'json');

        $id = $name.'Id';

        return array_column($data, null, $id);
    }

    private function getData($name, $id = null)
    {
        if (!isset($this->data[$name]) && isset($this->objects[$name])) {
            $name = $this->objects[$name];
        }
        if (!isset($this->data[$name])) {
            throw new RuntimeException(sprintf('Cannot get data for %s', $name));
        }
        $data = $this->data[$name];

        if (null === $id) {
            return $data;
        }

        if (!isset($data[$id])) {
            throw new RuntimeException(sprintf('Cannot get data for %s with id %s', $name, $id));
        }

        return $data[$id];
    }

    private function dateTimeValue(string $value)
    {
        return sprintf('<identity(new \DateTime("%s"))>', $value);
    }

    private function buildFixtureCase(array $data)
    {
        $items = [];
        foreach ($data as $item) {
            $id = 'Case_'.$item['CaseId'];
            $client = $this->getData('Client', $item['ClientId']);

            $items[$id] = [
                'caseNumber' => 'ETEK-'.$item['CaseId'],
                'caseWorker' => '@CaseWorker_'.$item['CurrentCaseWorkerId'],
                'clientCpr' => $client['PrimaryCPR'],
                'client' => '@Client_'.$item['ClientId'],
                'processType' => '@process-type:okonomisk_friplads',
                'createdBy' => '@CaseWorker_'.$item['CurrentCaseWorkerId'],
                'createdAt' => $this->dateTimeValue($item['CreatedDate']),
                'updatedBy' => '@CaseWorker_'.$item['CurrentCaseWorkerId'],
                'updatedAt' => $this->dateTimeValue($item['LastEdited']),
                'processStatus' => [
                    2 => '@process-status:oprettet', // Igangværende sag => Oprettet
                    3 => '@process-status:indkaldelse_til_samtale', // Afklarende samtale => Indkaldelse til samtale
                    4 => '@process-status:afventer_svar', // Høring i ydelsesafd => Afventer svar
                    5 => '@process-status:partshoering', // Partshøring => Partshøring
                    6 => '@process-status:afventer_svar', // Tilbagebetalingskrav => Afventer svar
                    7 => '@process-status:afsluttet', // Sag afsluttet => Afsluttet
                    9 => '@process-status:afventer_sagsbehandler', // Ikke oprettet sag => Afventer tildeling af sagsbehandler
                    10 => '@process-status:uanmeldt_besoeg', // Uanmeldt besøg => Uanmeldt besøg
                    12 => '@process-status:projekt', // Projekt => Projekt
                    13 => '@process-status:afsluttet', // Projekt afsluttet => Afsluttet

                    1 => '@process-status:afsluttet', // Projekt afsluttet => Afsluttet
                    11 => '@process-status:afsluttet', // Projekt afsluttet => Afsluttet
                ][$item['StatusId']],
                // @TODO "ClosedDate"?
                // @TODO "OpenedDate"?
            ];
        }

        return $items;
    }

    private function isConclusion(array $item)
    {
        return !empty(trim($item['Conclusion']));
    }

    private function isBaseConclusion(array $item)
    {
        return $this->isConclusion($item)
            && empty(trim($item['ArgumentsAgainstCohabitation']))
            && empty(trim($item['ArgumentsForCohabitation']));
    }

    private function isWeightedConclusion(array $item)
    {
        return $this->isConclusion($item) && !$this->isBaseConclusion($item);
    }

    private function buildFixtureBaseConclusion(array $data)
    {
        $items = [];
        $cases = array_column($this->getData('Case'), null, 'CaseNotesId');

        foreach ($data as $index => $item) {
            if ($this->isBaseConclusion($item)) {
                $id = 'BaseConclusion_'.$item['CaseNotesId'];
                if (!isset($cases[$item['CaseNotesId']]['CaseId'])) {
                    throw new RuntimeException(sprintf('Cannot get case id for case notes id %s', $item['CaseNotesId']));
                }
                $case = $cases[$item['CaseNotesId']];

                $items[$id] = [
                    'process' => '@Case_'.$case['CaseId'],
                    'conclusion' => self::escapeHtml($item['Conclusion']),
                    'createdAt' => $this->dateTimeValue($case['CreatedDate']),
                    'createdBy' => '@CaseWorker_'.$case['CurrentCaseWorkerId'],
                ];
            }
        }

        return $items;
    }

    private function buildFixtureWeightedConclusion(array $data)
    {
        $items = [];
        $cases = array_column($this->getData('Case'), null, 'CaseNotesId');

        foreach ($data as $index => $item) {
            if ($this->isWeightedConclusion($item)) {
                $id = 'WeightedConclusion_'.$item['CaseNotesId'];
                if (!isset($cases[$item['CaseNotesId']]['CaseId'])) {
                    throw new RuntimeException(sprintf('Cannot get case id for case notes id %s', $item['CaseNotesId']));
                }
                $case = $cases[$item['CaseNotesId']];

                $items[$id] = [
                    'process' => '@Case_'.$case['CaseId'],
                    'conclusion' => self::escapeHtml($item['Conclusion']),
                    'argumentsFor' => self::escapeHtml($item['ArgumentsForCohabitation']),
                    'argumentsAgainst' => self::escapeHtml($item['ArgumentsAgainstCohabitation']),
                    'createdAt' => $this->dateTimeValue($case['CreatedDate']),
                    'createdBy' => '@CaseWorker_'.$case['CurrentCaseWorkerId'],
                ];
            }
        }

        return $items;
    }

    private function buildFixtureCaseWorker(array $data)
    {
        $items = [];
        foreach ($data as $item) {
            $id = 'CaseWorker_'.$item['CaseWorkerId'];

            $items[$id] = [
                'username' => $item['UserName'],
                'roles' => $item['roles'] ?? ['ROLE_USER'],
            ];
        }

        return $items;
    }

    private function buildFixtureClient(array $data)
    {
        $items = [];
        $cases = array_column($this->getData('Case'), null, 'ClientId');

        foreach ($data as $item) {
            $id = 'Client_'.$item['ClientId'];

            if (!isset($cases[$item['ClientId']]['CaseId'])) {
                throw new RuntimeException(sprintf('Cannot get case id for client id %s', $item['ClientId']));
            }
            $case = $cases[$item['ClientId']];

            $items[$id] = [
                'firstName' => $item['PrimaryFirstName'],
                'lastName' => $item['PrimarySurName'],
                'process' => '@Case_'.$case['CaseId'],
                'address' => $item['PrimaryAddress'],
                'postalCode' => $item['PrimaryZip'],
                'telephone' => $item['PrimaryTelephone'],
                // '' =>     $item['PrimaryMobilePhone'],
                // '' =>     $item['PrimaryEmail'],
                // '' =>     $item['SecondaryFirstName'],
                // '' =>     $item['SecondarySurName'],
                // '' =>     $item['SecondaryCPR'],
                // '' =>     $item['SecondaryAddress'],
                // '' =>     $item['SecondaryZip'],
                // '' =>     $item['SecondaryTelephone'],
                // '' =>     $item['SecondaryMobilePhone'],
                // '' =>     $item['SecondaryEmail'],
                // '' =>     $item['IsPrimaryAddressSecret'],
                // '' =>     $item['IsSecondaryAddressSecret'],
                // '' =>     $item['NumberOfChildren'],
                // '' =>     $item['HasCommonBankAccount'],
                // '' =>     $item['HasCommonDebt'],
                'createdAt' => $this->dateTimeValue($case['CreatedDate']),
                'createdBy' => '@CaseWorker_'.$case['CurrentCaseWorkerId'],
            ];
        }

        return $items;
    }

    private function buildFixtureFinancialSupport(array $data)
    {
        $items = [];
        $cases = array_column($this->getData('Case'), null, 'ClientId');
        $financialSupportTypes = array_column($this->getData('FinancialSupportType'), null, 'FinancialSupportTypeId');

        foreach ($data as $item) {
            $clientId = $item['ClientId'];
            $id = 'FinancialSupport_'.$clientId;
            if (!isset($items[$id])) {
                if (!isset($cases[$clientId])) {
                    throw new RuntimeException(sprintf('Cannot get case id for financial support id %s', $item['CaseNotesId']));
                }
                $case = $cases[$clientId];

                $lines = array_filter($this->getData('FinancialSupport'), function ($item) use ($clientId) {
                    return $item['ClientId'] === $clientId;
                });

                foreach ($lines as &$line) {
                    $line += $financialSupportTypes[$line['FinancialSupportTypeId']];
                }
                unset($line);

                $rows = [];
                foreach ($lines as $line) {
                    // if (!empty($line['RepaymentAmount']) || !empty($line['SupportStopAmount']))

                    $repaymentAmount = $line['RepaymentAmount'];
                    $repaymentDate = ($line['RepaymentAmount'] && $line['RepaymentDate']) ? (new \DateTime($line['RepaymentDate']))->format('d-m-Y') : '';
                    $supportStopAmount = $line['SupportStopAmount'];
                    $supportStopDate = ($line['SupportStopAmount'] && $line['SupportStopDate']) ? (new \DateTime($line['SupportStopDate']))->format('d-m-Y') : '';
                    $rows[] =
                            '<tr>'
                            .'<td>'.$line['Type'].'</td>'
                            .'<td>'.$repaymentAmount.'</td>'
                            .'<td>'.$repaymentDate.'</td>'
                            .'<td>'.$supportStopAmount.'</td>'
                            .'<td>'.$supportStopDate.'</td>'
                            .'<td>'.$line['Frequency'].'</td>'
                            .'</tr>';
                }
                unset($line);

                if (!empty($rows)) {
                    $body =
                        '<table class="table">'
                        .'<thead>'
                        .'<tr>'
                        .'<td></td>'
                        .'<th colspan="2">Tilbagebetaling</th>'
                        .'<th colspan="2">Stoppet</th>'
                        .'</tr>'
                        .'<tr>'
                        .'<td></td>'
                        .'<td>Beløb</td><td>Dato</td>'
                        .'<td>Beløb</td><td>Dato</td>'
                        .'</tr>'
                        .'</thead>'
                        .'<tbody>'.implode('', $rows).'</tbody>'
                        .'</table>';

                    $createdAt = new \DateTime($case['CreatedDate']);
                    $createdAt->setTime(12, 0, 0);

                    $items[$id] = [
                        'title' => 'Økonomi (indkomst)',
                        'body' => self::escapeHtml($body),
                        'process' => '@Case_'.$case['CaseId'],
                        'type' => JournalEntryEnumType::NOTE,
                        'createdAt' => $this->dateTimeValue($createdAt->format(\DateTime::ATOM)),
                        'createdBy' => '@CaseWorker_'.$case['CurrentCaseWorkerId'],
                    ];
                }
            }
        }

        return $items;
    }

    private function buildFixtureSharedEconomy(array $data)
    {
        $items = [];
        $cases = array_column($this->getData('Case'), null, 'ClientId');
        $financialSupportTypes = array_column($this->getData('FinancialSupportType'), null, 'FinancialSupportTypeId');

        foreach ($data as $item) {
            $clientId = $item['ClientId'];
            $id = 'SharedEconomy_'.$clientId;
            if (!isset($cases[$clientId])) {
                throw new RuntimeException(sprintf('Cannot get case id for financial support id %s', $item['CaseNotesId']));
            }
            $case = $cases[$clientId];

            $body = implode('', [
                sprintf('<p>Fælles gæld: %s</p>', $item['HasCommonDebt'] ? 'ja' : 'nej'),
                sprintf('<p>Fælles konti: %s</p>', $item['HasCommonBankAccount'] ? 'ja' : 'nej'),
            ]);

            $createdAt = new \DateTime($case['CreatedDate']);
            $createdAt->setTime(12, 0, 0);

            $items[$id] = [
                'title' => 'Økonomi (indkomst) – afkrydsning',
                'body' => self::escapeHtml($body),
                'process' => '@Case_'.$case['CaseId'],
                'type' => JournalEntryEnumType::NOTE,
                'createdAt' => $this->dateTimeValue($createdAt->format(\DateTime::ATOM)),
                'createdBy' => '@CaseWorker_'.$case['CurrentCaseWorkerId'],
            ];
        }

        return $items;
    }

    private function buildFixtureCaseNotes(array $data)
    {
        $items = [];
        $cases = array_column($this->getData('Case'), null, 'CaseNotesId');

        foreach ($data as $item) {
            $id = 'CaseNotes_'.$item['CaseNotesId'];

            if (!isset($cases[$item['CaseNotesId']]['CaseId'])) {
                throw new RuntimeException(sprintf('Cannot get case id for case notes id %s', $item['CaseNotesId']));
            }
            $case = $cases[$item['CaseNotesId']];

            foreach ([
                'Description' => [
                    'title' => 'Beskrivelse',
                    'type' => JournalEntryEnumType::INTERNAL_NOTE,
                ],
                'Conditions' => [
                    'title' => 'Bopælsforhold',
                    'type' => JournalEntryEnumType::NOTE,
                ],
                'Diary' => [
                    'title' => 'Dagbog',
                    'type' => JournalEntryEnumType::INTERNAL_NOTE,
                ],
                'Economics' => [
                    'title' => 'Finansielle oplysninger',
                    'type' => JournalEntryEnumType::NOTE,
                ],
                'InternalNotes' => [
                    'title' => 'Internt notat',
                    'type' => JournalEntryEnumType::INTERNAL_NOTE,
                ],
                // 'IsCasePoliceCharged',
                // 'IsCaseTerminatedWithCasework',
                // 'IsCaseTerminatedWithoutCasework',
                // 'IsHusbandMovedBeforeCasework',
                // 'IsHusbandMovedDuringOrAfterCasework',
                'Notes' => [
                    'title' => 'Bemærkninger',
                    'type' => JournalEntryEnumType::NOTE,
                ],
                'Relationships' => [
                    'title' => 'Civile forhold',
                    'type' => JournalEntryEnumType::NOTE,
                ],
                'Services' => [
                    'title' => 'Økonomi (ydelser)',
                    'type' => JournalEntryEnumType::NOTE,
                ],
                // 'Services_IsChildSupportPaidByFather',
                // 'Services_IsChildSupportPaidByPublic',
                // 'Services_IsReceivingChildSupport',
                // 'Services_IsReceivingFreePlace',
                // 'Services_IsReceivingHousingSupport',
            ] as $field => $metadata) {
                $body = $item[$field];
                if (!empty($body)) {
                    $createdAt = new \DateTime($case['CreatedDate']);
                    $createdAt->setTime(12, 0, 0);
                    // "Description" must be first entry.
                    if ('Description' === $field) {
                        $createdAt->setTime(0, 0, 0);
                    }

                    $items[$id.'_'.$field] = [
                        'title' => $metadata['title'],
                        // @see https://github.com/nelmio/alice/issues/840
                        'body' => self::escapeHtml($body),
                        'process' => '@Case_'.$case['CaseId'],
                        'type' => $metadata['type'] ?? JournalEntryEnumType::NOTE,
                        'createdAt' => $this->dateTimeValue($createdAt->format(\DateTime::ATOM)),
                        'createdBy' => '@CaseWorker_'.$case['CurrentCaseWorkerId'],
                    ];
                }
            }
        }

        return $items;
    }

    private static function escapeHtml($html)
    {
        $escaped = htmlentities($html);

        // Encode characters with special meaning in fixtures.
        foreach (['@', '$', '['] as $c) {
            $escaped = str_replace($c, '&#'.\ord($c).';', $escaped);
        }

        return $escaped;
    }

    private static function unescapeHtml($html)
    {
        return html_entity_decode($html);
    }

    private function unescapeContent(OutputInterface $output)
    {
        $journalEntries = $this->entityManager->getRepository(JournalEntry::class)
            ->findAll();

        $output->writeln('Decoding content in journal entries');

        foreach ($journalEntries as $journalEntry) {
            $body = $journalEntry->getBody();
            $status = 'ok';
            if (false !== strpos($body, htmlspecialchars('<'))) {
                $journalEntry->setBody(self::unescapeHtml($body));
                $this->entityManager->persist($journalEntry);
                $status = 'decoded';
            }
            $output->writeln(sprintf('#%s: %s [%s]', $journalEntry->getId(), $journalEntry->getTitle(), $status));
        }
        $this->entityManager->flush();

        $baseConclusions = $this->entityManager->getRepository(BaseConclusion::class)
            ->findAll();

        $output->writeln('Decoding content in base conclusion');

        foreach ($baseConclusions as $baseConclusion) {
            $conclusion = $baseConclusion->getConclusion();
            $status = 'ok';
            if (false !== strpos($conclusion, htmlspecialchars('<'))) {
                $baseConclusion->setConclusion(self::unescapeHtml($conclusion));
                $this->entityManager->persist($baseConclusion);
                $status = 'decoded';
            }
            $output->writeln(sprintf('#%s: %s [%s]', $baseConclusion->getId(), $baseConclusion->getProcess()->getId(), $status));
        }
        $this->entityManager->flush();

        $weightedConclusions = $this->entityManager->getRepository(WeightedConclusion::class)
            ->findAll();

        $output->writeln('Decoding content in weighted conclusion');

        foreach ($weightedConclusions as $weightedConclusion) {
            $status = 'ok';
            $fields = ['conclusion', 'argumentsAgainst', 'argumentsFor'];
            foreach ($fields as $field) {
                $value = $weightedConclusion->{'get'.ucfirst($field)}();
                if (false !== strpos($value, htmlspecialchars('<'))) {
                    $weightedConclusion->{'set'.ucfirst($field)}(self::unescapeHtml($value));
                    $this->entityManager->persist($weightedConclusion);
                    $status = 'decoded';
                }
            }

            $output->writeln(sprintf('#%s: %s [%s]', $weightedConclusion->getId(), $weightedConclusion->getProcess()->getId(), $status));
        }
        $this->entityManager->flush();

        return 0;
    }
}
